// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MeuPonto.Modules.Exemplar.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProcessamentoDeVendaFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ProcessamentoVenda.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Modules/Exemplar/Features", "Processamento de Venda", @"Processar Venda

1. Cliente chega à saída do PDV com bens ou serviços para adquirir.
2. Caixa começa uma nova venda.
3. Caixa insere o identificador do item.
4. Sistema registra a linha de item da venda e apresenta uma descrição do item, seu preço e total parcial da venda. Preço calculado segundo um conjunto de regras de preços.
Caixa repete os passos 3 e 4 até que indique ter terminado.
5. Sistema apresenta o total com impostos calculados.
6. Caixa informa total ao Cliente e solicita pagamento.
7. Cliente paga e Sistema trata pagamento.
8. Sistema registra venda completada e envia informações de venda e pagamento para Sistema externo de contabilidade (para contabilidade e comissões) e para Sistema de Estoque (para atualizar o estoque).
9. Sistema apresenta recibo.
10. Cliente vai embora com recibo e mercadorias (se houver).", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Processamento de Venda")))
            {
                await global::MeuPonto.Modules.Exemplar.Features.ProcessamentoDeVendaFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Processar Venda] Caixa efetua nova venda")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Processamento de Venda")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("wip")]
        public async System.Threading.Tasks.Task ProcessarVendaCaixaEfetuaNovaVenda()
        {
            string[] tagsOfScenario = new string[] {
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Processar Venda] Caixa efetua nova venda", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
 await testRunner.WhenAsync("o caixa começar uma nova venda", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 22
 await testRunner.AndAsync("o caixa inserir o identificador do item", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 23
 await testRunner.ThenAsync("o sistema deverá registrar a linha de item da venda e apresentar uma descrição do" +
                        " item, seu preço e total parcial da venda", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 24
 await testRunner.WhenAsync("o caixa terminar a venda", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 25
 await testRunner.ThenAsync("o sistema deverá apresentar o total com impostos calculados", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 26
 await testRunner.WhenAsync("o cliente pagar", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 27
 await testRunner.ThenAsync("o sitema deverá tratar o pagamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 28
 await testRunner.AndAsync("o sistema deverá registrar venda completada", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 29
 await testRunner.AndAsync("o sistema deverá enviar informações de venda e pagamento para sistema externo de " +
                        "contabilidade", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 30
 await testRunner.AndAsync("o sistema deverá enviar informações de venda e pagamento para sistema externo de " +
                        "estoque", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 31
 await testRunner.AndAsync("o sistema deverá apresentar o recibo", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Processar Venda] Caixa efetua nova venda com sucesso")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Processamento de Venda")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("wip")]
        public async System.Threading.Tasks.Task ProcessarVendaCaixaEfetuaNovaVendaComSucesso()
        {
            string[] tagsOfScenario = new string[] {
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Processar Venda] Caixa efetua nova venda com sucesso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
 await testRunner.WhenAsync("o caixa iniciar uma nova venda", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "id item",
                            "quantidade"});
                table27.AddRow(new string[] {
                            "B0002",
                            "10"});
                table27.AddRow(new string[] {
                            "A0001",
                            "5"});
                table27.AddRow(new string[] {
                            "C0007",
                            "2"});
#line 36
 await testRunner.AndAsync("o caixa entrar um item como:", ((string)(null)), table27, "E ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "descrição",
                            "preço",
                            "total"});
                table28.AddRow(new string[] {
                            "Biscoito",
                            "R$ 1,99",
                            "19,90"});
                table28.AddRow(new string[] {
                            "Sabonete",
                            "R$ 3,50",
                            "17,50"});
                table28.AddRow(new string[] {
                            "Arroz (1 kg)",
                            "R$ 5,70",
                            "11,4"});
#line 41
 await testRunner.ThenAsync("o sistema deverá registrar a linha de item da venda e apresentar uma descrição do" +
                        " item, seu preço e total parcial da venda", ((string)(null)), table28, "Então ");
#line hidden
#line 46
 await testRunner.WhenAsync("o caixa terminar a venda", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "total",
                            "impostos",
                            "total com impostos"});
                table29.AddRow(new string[] {
                            "R$ 48,8",
                            "R$ 4,88",
                            "R$ 53,68"});
#line 47
 await testRunner.ThenAsync("o sistema deverá apresentar o total com impostos calculados", ((string)(null)), table29, "Então ");
#line hidden
#line 50
 await testRunner.WhenAsync("o cliente fazer o pagamento de \'R$ 53,68\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 51
 await testRunner.ThenAsync("o sitema deverá tratar o pagamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 52
 await testRunner.AndAsync("o sistema deverá registrar venda completada", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 53
 await testRunner.AndAsync("o sistema deverá enviar informações de venda e pagamento para sistema externo de " +
                        "contabilidade", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 54
 await testRunner.AndAsync("o sistema deverá enviar informações de venda e pagamento para sistema externo de " +
                        "estoque", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 55
 await testRunner.AndAsync("o sistema deverá apresentar o recibo", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
