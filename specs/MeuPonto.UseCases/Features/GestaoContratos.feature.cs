// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MeuPonto.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GestaoContratosFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GestaoContratos.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Features", "Gestão Contratos", @"O sistema deverá fornecer para o trabalhador a capacidade de gerenciar seus contratos.

Abrir Contrato

O sistema deverá fornecer para o trabalhador a capacidade de abrir um contrato.

1. Trabalhador solicita abertura de contrato
2. Sistema apresenta um contrato novo
3. Trabalhador abre o contrato (nome, ativo, segunda, terça, …) (E2)
4. Sistema registra o contrato

O sistema deverá fornecer para o trabalhador a capacidade de alterar um contrato

O sistema deverá fornecer para o trabalhador a capacidade de encerrar um contrato

O sistema deverá fornecer para o trabalhador a capacidade de excluir um contrato", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Gestão Contratos")))
            {
                await global::MeuPonto.Features.GestaoContratosFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato] Trabalhador abre um contrato")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("main")]
        public async System.Threading.Tasks.Task AbrirContratoTrabalhadorAbreUmContrato()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato] Trabalhador abre um contrato", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
 await testRunner.WhenAsync("o trabalhador solicitar a abertura de um contrato", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 27
 await testRunner.ThenAsync("o sistema deverá apresentar um contrato novo", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 28
 await testRunner.AndAsync("o contrato deverá ser ativo", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "dia semana",
                            "tempo"});
                table9.AddRow(new string[] {
                            "Sunday",
                            "00:00:00"});
                table9.AddRow(new string[] {
                            "Monday",
                            "08:00:00"});
                table9.AddRow(new string[] {
                            "Tuesday",
                            "08:00:00"});
                table9.AddRow(new string[] {
                            "Wednesday",
                            "08:00:00"});
                table9.AddRow(new string[] {
                            "Thursday",
                            "08:00:00"});
                table9.AddRow(new string[] {
                            "Friday",
                            "08:00:00"});
                table9.AddRow(new string[] {
                            "Saturday",
                            "00:00:00"});
#line 29
 await testRunner.AndAsync("o contrato deverá prever a seguinte jornada de trabalho semanal:", ((string)(null)), table9, "E ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "nome",
                            "ativo",
                            "domingo",
                            "segunda",
                            "terça",
                            "quarta",
                            "quinta",
                            "sexta",
                            "sábado"});
                table10.AddRow(new string[] {
                            "Contrato A",
                            "True",
                            "00:00:00",
                            "08:00:00",
                            "08:00:00",
                            "08:00:00",
                            "08:00:00",
                            "08:00:00",
                            "00:00:00"});
#line 38
 await testRunner.WhenAsync("o trabalhador abrir o contrato como:", ((string)(null)), table10, "Quando ");
#line hidden
#line 41
 await testRunner.ThenAsync("o sistema deverá registrar o contrato como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Alterar Contrato] Trabalhador altera um contrato para corrigir um erro de digita" +
            "ção no nome")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("main")]
        public async System.Threading.Tasks.Task AlterarContratoTrabalhadorAlteraUmContratoParaCorrigirUmErroDeDigitacaoNoNome()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Alterar Contrato] Trabalhador altera um contrato para corrigir um erro de digita" +
                    "ção no nome", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 47
 await testRunner.GivenAsync("que existe um contrato aberto \'Marcello - Particular\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 48
 await testRunner.WhenAsync("o trabalhador solicitar a edição do contrato \'Marcello - Particular\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table11.AddRow(new string[] {
                            "Marcelo - Particular"});
#line 49
 await testRunner.AndAsync("o trabalhador alterar o contrato para", ((string)(null)), table11, "E ");
#line hidden
#line 52
 await testRunner.ThenAsync("o sistema deverá alterar o contrato como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato] Trabalhador abre um contrato com nome maior que 2 caractere")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("secondary")]
        public async System.Threading.Tasks.Task AbrirContratoTrabalhadorAbreUmContratoComNomeMaiorQue2Caractere()
        {
            string[] tagsOfScenario = new string[] {
                    "secondary"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato] Trabalhador abre um contrato com nome maior que 2 caractere", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 59
 await testRunner.GivenAsync("que existe uma abertura de contrato em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table12.AddRow(new string[] {
                            "Contrato B"});
#line 60
 await testRunner.WhenAsync("o trabalhador abrir o contrato como:", ((string)(null)), table12, "Quando ");
#line hidden
#line 63
 await testRunner.ThenAsync("o sistema deverá registrar o contrato como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Alterar Contrato] Trabalhador altera um contrato com nome maior que 2 caractere")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("secondary")]
        public async System.Threading.Tasks.Task AlterarContratoTrabalhadorAlteraUmContratoComNomeMaiorQue2Caractere()
        {
            string[] tagsOfScenario = new string[] {
                    "secondary"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Alterar Contrato] Trabalhador altera um contrato com nome maior que 2 caractere", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 67
 await testRunner.GivenAsync("que existe um contrato aberto \'Contrato Feito\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 68
 await testRunner.AndAsync("que existe uma edição do contrato \'Contrato Feito\' em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table13.AddRow(new string[] {
                            "Contrato B"});
#line 69
 await testRunner.WhenAsync("o trabalhador alterar o contrato para", ((string)(null)), table13, "Quando ");
#line hidden
#line 72
 await testRunner.ThenAsync("o sistema deverá alterar o contrato como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato] Trabalhador tenta abrir um contrato com nome menor que 3 caracte" +
            "res")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        public async System.Threading.Tasks.Task AbrirContratoTrabalhadorTentaAbrirUmContratoComNomeMenorQue3Caracteres()
        {
            string[] tagsOfScenario = new string[] {
                    "exception"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato] Trabalhador tenta abrir um contrato com nome menor que 3 caracte" +
                    "res", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 76
 await testRunner.GivenAsync("que existe uma abertura de contrato em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table14.AddRow(new string[] {
                            "A"});
#line 77
 await testRunner.WhenAsync("o trabalhador tentar abrir o contrato como", ((string)(null)), table14, "Quando ");
#line hidden
#line 80
 await testRunner.ThenAsync("a tentativa de abrir o contrato deverá falhar com um erro \"\'Nome\' deve ser maior " +
                        "ou igual a 3 caracteres.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Alterar Contrato] Trabalhador tenta alterar um contrato com nome menor que 3 car" +
            "acteres")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        public async System.Threading.Tasks.Task AlterarContratoTrabalhadorTentaAlterarUmContratoComNomeMenorQue3Caracteres()
        {
            string[] tagsOfScenario = new string[] {
                    "exception"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Alterar Contrato] Trabalhador tenta alterar um contrato com nome menor que 3 car" +
                    "acteres", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 84
 await testRunner.GivenAsync("que existe um contrato aberto \'Contrato Feito\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 85
 await testRunner.AndAsync("que existe uma edição do contrato \'Contrato Feito\' em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table15.AddRow(new string[] {
                            "B"});
#line 86
 await testRunner.WhenAsync("o trabalhador tentar alterar o contrato para", ((string)(null)), table15, "Quando ");
#line hidden
#line 89
 await testRunner.ThenAsync("a tentativa de alterar o contrato deverá falhar com um erro \"\'Nome\' deve ser maio" +
                        "r ou igual a 3 caracteres.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato] Trabalhador abre um contrato com nome menor que 36 caracteres")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("secondary")]
        public async System.Threading.Tasks.Task AbrirContratoTrabalhadorAbreUmContratoComNomeMenorQue36Caracteres()
        {
            string[] tagsOfScenario = new string[] {
                    "secondary"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato] Trabalhador abre um contrato com nome menor que 36 caracteres", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 95
 await testRunner.GivenAsync("que existe uma abertura de contrato em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table16.AddRow(new string[] {
                            "Contrato B"});
#line 96
 await testRunner.WhenAsync("o trabalhador abrir o contrato como:", ((string)(null)), table16, "Quando ");
#line hidden
#line 99
 await testRunner.ThenAsync("o sistema deverá registrar o contrato como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato] Trabalhador tenta abrir um contrato com nome maior que 35 caract" +
            "eres")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        public async System.Threading.Tasks.Task AbrirContratoTrabalhadorTentaAbrirUmContratoComNomeMaiorQue35Caracteres()
        {
            string[] tagsOfScenario = new string[] {
                    "exception"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato] Trabalhador tenta abrir um contrato com nome maior que 35 caract" +
                    "eres", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 103
 await testRunner.GivenAsync("que existe uma abertura de contrato em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table17.AddRow(new string[] {
                            "Contrato de Trabalho Feito com uma Empresa do Ramo da Industria Farmacêutica do E" +
                                "stado do Rio de Janeiro"});
#line 104
 await testRunner.WhenAsync("o trabalhador tentar abrir o contrato como", ((string)(null)), table17, "Quando ");
#line hidden
#line 107
 await testRunner.ThenAsync("a tentativa de abrir o contrato deverá falhar com um erro \"\'Nome\' deve ser menor " +
                        "ou igual a 35 caracteres.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato] Trabalhador abre um contrato com uma jornada de trabalho previst" +
            "a de 40 horas semanais")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("secondary")]
        public async System.Threading.Tasks.Task AbrirContratoTrabalhadorAbreUmContratoComUmaJornadaDeTrabalhoPrevistaDe40HorasSemanais()
        {
            string[] tagsOfScenario = new string[] {
                    "secondary"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato] Trabalhador abre um contrato com uma jornada de trabalho previst" +
                    "a de 40 horas semanais", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 113
 await testRunner.GivenAsync("que existe uma abertura de contrato em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 114
 await testRunner.AndAsync("que a jornada de trabalho semanal é de \'Monday\' a \'Friday\' das \'09:00\' às \'18:00\'" +
                        " com \'01:00\' de almoço", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 115
 await testRunner.ButAsync("que não tem jornada de trabalho no \'Saturday\' e no \'Sunday\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Mas ");
#line hidden
#line 116
 await testRunner.WhenAsync("o trabalhador abrir o contrato", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "dia semana",
                            "tempo"});
                table18.AddRow(new string[] {
                            "Sunday",
                            "00:00:00"});
                table18.AddRow(new string[] {
                            "Monday",
                            "08:00:00"});
                table18.AddRow(new string[] {
                            "Tuesday",
                            "08:00:00"});
                table18.AddRow(new string[] {
                            "Wednesday",
                            "08:00:00"});
                table18.AddRow(new string[] {
                            "Thursday",
                            "08:00:00"});
                table18.AddRow(new string[] {
                            "Friday",
                            "08:00:00"});
                table18.AddRow(new string[] {
                            "Saturday",
                            "00:00:00"});
#line 117
 await testRunner.ThenAsync("a jornada de trabalho semanal prevista no contrato deverá ser:", ((string)(null)), table18, "Então ");
#line hidden
#line 126
 await testRunner.AndAsync("o tempo total da jornada de trabalho semanal prevista no contrato deverá ser \'1.1" +
                        "6:00\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato] Trabalhador abre um contrato com uma jornada de trabalho previst" +
            "a de 44 horas semanais (incluindo sábado)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("secondary")]
        public async System.Threading.Tasks.Task AbrirContratoTrabalhadorAbreUmContratoComUmaJornadaDeTrabalhoPrevistaDe44HorasSemanaisIncluindoSabado()
        {
            string[] tagsOfScenario = new string[] {
                    "secondary"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato] Trabalhador abre um contrato com uma jornada de trabalho previst" +
                    "a de 44 horas semanais (incluindo sábado)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 130
 await testRunner.GivenAsync("que existe uma abertura de contrato em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 131
 await testRunner.AndAsync("que a jornada de trabalho semanal é de \'Monday\' a \'Friday\' das \'09:00\' às \'18:00\'" +
                        " com \'01:00\' de almoço", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 132
 await testRunner.AndAsync("que a jornada de trabalho de \'Saturday\' é das \'08:00\' às \'12:00\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 133
 await testRunner.ButAsync("que não tem jornada de trabalho no \'Sunday\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Mas ");
#line hidden
#line 134
 await testRunner.WhenAsync("o trabalhador abrir o contrato", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "dia semana",
                            "tempo"});
                table19.AddRow(new string[] {
                            "Sunday",
                            "00:00:00"});
                table19.AddRow(new string[] {
                            "Monday",
                            "08:00:00"});
                table19.AddRow(new string[] {
                            "Tuesday",
                            "08:00:00"});
                table19.AddRow(new string[] {
                            "Wednesday",
                            "08:00:00"});
                table19.AddRow(new string[] {
                            "Thursday",
                            "08:00:00"});
                table19.AddRow(new string[] {
                            "Friday",
                            "08:00:00"});
                table19.AddRow(new string[] {
                            "Saturday",
                            "04:00:00"});
#line 135
 await testRunner.ThenAsync("a jornada de trabalho semanal prevista no contrato deverá ser:", ((string)(null)), table19, "Então ");
#line hidden
#line 144
 await testRunner.AndAsync("o tempo total da jornada de trabalho semanal prevista no contrato deverá ser \'1.2" +
                        "0:00\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Encerrar Contrato] Trabalhador encerra um contrato")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("main")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("wip")]
        public async System.Threading.Tasks.Task EncerrarContratoTrabalhadorEncerraUmContrato()
        {
            string[] tagsOfScenario = new string[] {
                    "main",
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Encerrar Contrato] Trabalhador encerra um contrato", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 150
 await testRunner.GivenAsync("que existe um contrato aberto \'Contrato A\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 151
 await testRunner.WhenAsync("o trabalhador solicitar o encerramento do contrato \'Contrato A\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 152
 await testRunner.AndAsync("o trabalhador encerrar o contrato \'Contrato A\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 153
 await testRunner.ThenAsync("o contrato deverá ser encerrado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Excluir Contrato] Trabalhador exclui um contrato que não era necessário")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("main")]
        public async System.Threading.Tasks.Task ExcluirContratoTrabalhadorExcluiUmContratoQueNaoEraNecessario()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Excluir Contrato] Trabalhador exclui um contrato que não era necessário", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 159
 await testRunner.GivenAsync("que existe um contrato aberto \'Contrato A\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 160
 await testRunner.WhenAsync("o trabalhador solicitar a exclusão do contrato \'Contrato A\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 162
 await testRunner.AndAsync("o trabalhador excluir esse contrato", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 163
 await testRunner.ThenAsync("o contrato deverá ser excluído", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Excluir Contrato] Trabalhador tenta excluir excluir um contrato com ponto(s) mar" +
            "cado(s)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gestão Contratos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exception")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("wip")]
        public async System.Threading.Tasks.Task ExcluirContratoTrabalhadorTentaExcluirExcluirUmContratoComPontoSMarcadoS()
        {
            string[] tagsOfScenario = new string[] {
                    "exception",
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Excluir Contrato] Trabalhador tenta excluir excluir um contrato com ponto(s) mar" +
                    "cado(s)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 168
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 169
 await testRunner.GivenAsync("que existe um contrato aberto \'Contrato C\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 170
 await testRunner.AndAsync("que existe um ponto qualificado com o contrato \'Contrato C\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 171
 await testRunner.WhenAsync("o trabalhador solicitar a exclusão do contrato \'Contrato C\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 173
 await testRunner.AndAsync("o trabalhador excluir esse contrato", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 174
 await testRunner.ThenAsync("o contrato não deverá ser excluído", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
