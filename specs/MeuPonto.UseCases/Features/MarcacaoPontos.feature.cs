// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MeuPonto.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MarcacaoPontosFeature : object, Xunit.IClassFixture<MarcacaoPontosFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MarcacaoPontos.feature"
#line hidden
        
        public MarcacaoPontosFeature(MarcacaoPontosFeature.FixtureData fixtureData, MeuPonto_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Features", "Marcacao Pontos", "O sistema deverá fornecer para o trabalhador a capacidade de marcar um ponto", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="[Marcar Ponto] Trabalhador marca os pontos de entrada e saída do expediente")]
        [Xunit.TraitAttribute("FeatureTitle", "Marcacao Pontos")]
        [Xunit.TraitAttribute("Description", "[Marcar Ponto] Trabalhador marca os pontos de entrada e saída do expediente")]
        [Xunit.TraitAttribute("Category", "main")]
        [Xunit.InlineDataAttribute("27/11/2022 09:14", "Marcelo - Ateliex", "Entrada", new string[0])]
        [Xunit.InlineDataAttribute("27/11/2022 18:05", "Marcelo - Ateliex", "Saida", new string[0])]
        public void MarcarPontoTrabalhadorMarcaOsPontosDeEntradaESaidaDoExpediente(string dataHora, string contrato, string momentoId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "main"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("data/hora", dataHora);
            argumentsOfScenario.Add("contrato", contrato);
            argumentsOfScenario.Add("momento id", momentoId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Marcar Ponto] Trabalhador marca os pontos de entrada e saída do expediente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given(string.Format("que a data/hora do relógio é \'{0}\'", dataHora), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 12
 testRunner.And(string.Format("que existe um contrato aberto \'{0}\'", contrato), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 13
 testRunner.When("o trabalhador solicitar uma marcação de ponto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 14
 testRunner.Then("o sistema deverá apresentar um ponto novo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "contrato",
                            "momento id"});
                table21.AddRow(new string[] {
                            string.Format("{0}", contrato),
                            string.Format("{0}", momentoId)});
#line 15
 testRunner.When("o trabalhador marcar o ponto como:", ((string)(null)), table21, "Quando ");
#line hidden
#line 18
 testRunner.Then(string.Format("a data do ponto deverá ser \'{0}\'", dataHora), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 19
 testRunner.And(string.Format("o ponto deverá ser qualificado pelo contrato \'{0}\'", contrato), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 20
 testRunner.And(string.Format("o momento do ponto deverá ser de \'{0}\'", momentoId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 21
 testRunner.But("o ponto não deverá indicar que foi uma pausa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Mas ");
#line hidden
#line 22
 testRunner.And("o ponto não deverá indicar que foi estimado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 23
 testRunner.And("o ponto não deverá ter uma observação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="[Marcar Ponto] Trabalhador marca os pontos de pausa do expediente")]
        [Xunit.TraitAttribute("FeatureTitle", "Marcacao Pontos")]
        [Xunit.TraitAttribute("Description", "[Marcar Ponto] Trabalhador marca os pontos de pausa do expediente")]
        [Xunit.TraitAttribute("Category", "alter")]
        [Xunit.InlineDataAttribute("Marcelo - Ateliex", "Saida", "Almoco", new string[0])]
        [Xunit.InlineDataAttribute("Marcelo - Ateliex", "Entrada", "Almoco", new string[0])]
        public void MarcarPontoTrabalhadorMarcaOsPontosDePausaDoExpediente(string contrato, string momentoId, string pausaId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "alter"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("contrato", contrato);
            argumentsOfScenario.Add("momento id", momentoId);
            argumentsOfScenario.Add("pausa id", pausaId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Marcar Ponto] Trabalhador marca os pontos de pausa do expediente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
 testRunner.Given(string.Format("que existe um contrato aberto \'{0}\'", contrato), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 35
 testRunner.When("o trabalhador solicitar uma marcação de ponto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "contrato",
                            "momento id",
                            "pausa id"});
                table22.AddRow(new string[] {
                            string.Format("{0}", contrato),
                            string.Format("{0}", momentoId),
                            string.Format("{0}", pausaId)});
#line 36
 testRunner.And("o trabalhador marcar o ponto como:", ((string)(null)), table22, "E ");
#line hidden
#line 40
 testRunner.Then(string.Format("o momento do ponto deverá ser de \'{0}\'", momentoId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 41
 testRunner.And(string.Format("a pausa do ponto deverá ser \'{0}\'", pausaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="[Marcar Ponto] Trabalhador marca o ponto justificando porque chegou atrasado")]
        [Xunit.TraitAttribute("FeatureTitle", "Marcacao Pontos")]
        [Xunit.TraitAttribute("Description", "[Marcar Ponto] Trabalhador marca o ponto justificando porque chegou atrasado")]
        [Xunit.TraitAttribute("Category", "alter")]
        public void MarcarPontoTrabalhadorMarcaOPontoJustificandoPorqueChegouAtrasado()
        {
            string[] tagsOfScenario = new string[] {
                    "alter"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Marcar Ponto] Trabalhador marca o ponto justificando porque chegou atrasado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.Given("que existe um contrato aberto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 53
 testRunner.And("que existe uma marcação de ponto em andamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 54
 testRunner.When("o trabalhador marcar o ponto com a seguinte observação:", "Hoje o trânsito estava lento.", ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 58
 testRunner.Then("a observação do ponto deverá ser:", "Hoje o trânsito estava lento.", ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MarcacaoPontosFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MarcacaoPontosFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
