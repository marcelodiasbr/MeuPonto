// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MeuPonto.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BackupComprovantesFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "BackupComprovantes.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Features", "Backup Comprovantes", "O sistema deverá fornecer para o trabalhador a capacidade de guardar seus comprov" +
                    "antes.\r\n\r\nO sistema deverá fornecer para o trabalhador a capacidade de guardar u" +
                    "m comprovante", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Backup Comprovantes")))
            {
                await global::MeuPonto.Features.BackupComprovantesFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Registrar Ponto com um Comprovante] Trabalhador registra um ponto com um comprov" +
            "ante")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Backup Comprovantes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extension")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("wip")]
        public async System.Threading.Tasks.Task RegistrarPontoComUmComprovanteTrabalhadorRegistraUmPontoComUmComprovante()
        {
            string[] tagsOfScenario = new string[] {
                    "extension",
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Registrar Ponto com um Comprovante] Trabalhador registra um ponto com um comprov" +
                    "ante", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 13
 await testRunner.GivenAsync("que existe um contrato aberto", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 14
 await testRunner.AndAsync("que existe um registro de ponto em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 15
 await testRunner.WhenAsync("o trabalhador solicitar o backup de um comprovante", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 16
 await testRunner.ThenAsync("o sistema deverá apresentar as opções de backup de um comprovante", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 17
 await testRunner.WhenAsync("o trabalhador escanear a imagem do comprovante com a data \'17/02/2023 17:07\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 18
 await testRunner.ThenAsync("o sistema deverá processar a imagem do comprovante", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 19
 await testRunner.AndAsync("a data do ponto deverá ser \'17/02/2023 17:07\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "data/hora"});
                table2.AddRow(new string[] {
                            "17/02/2023 17:07"});
#line 21
 await testRunner.WhenAsync("o trabalhador registrar o ponto como:", ((string)(null)), table2, "Quando ");
#line hidden
#line 24
 await testRunner.ThenAsync("o sistema deverá registrar o ponto como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 25
 await testRunner.AndAsync("o comprovante \'17/02/2023 17:07\' deverá ser associado ao ponto", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Registrar Ponto com um Comprovante] Sistema reconhece a data/hora no comprovante" +
            " de ponto")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Backup Comprovantes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("formulated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("wip")]
        public async System.Threading.Tasks.Task RegistrarPontoComUmComprovanteSistemaReconheceADataHoraNoComprovanteDePonto()
        {
            string[] tagsOfScenario = new string[] {
                    "formulated",
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Registrar Ponto com um Comprovante] Sistema reconhece a data/hora no comprovante" +
                    " de ponto", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
 await testRunner.GivenAsync("que o trabalhador tem um comprovante de ponto com a data \'17/02/2023 17:07\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 30
 await testRunner.WhenAsync("o trabalhador escanear o comprovante de ponto", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 31
 await testRunner.ThenAsync("o sistema deverá processar a imagem do comprovante", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 32
 await testRunner.AndAsync("a data do ponto do comprovante deverá ser \'17/02/2023 17:07\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Guardar Comprovante] Trabalhador guarda o comprovante de ponto")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Backup Comprovantes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("formulated")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("wip")]
        public async System.Threading.Tasks.Task GuardarComprovanteTrabalhadorGuardaOComprovanteDePonto()
        {
            string[] tagsOfScenario = new string[] {
                    "formulated",
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Guardar Comprovante] Trabalhador guarda o comprovante de ponto", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
 await testRunner.GivenAsync("que o trabalhador escaneou um comprovante de ponto com a data \'17/02/2023 17:07\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 39
 await testRunner.WhenAsync("o trabalhador guardar o comprovante de ponto", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 40
 await testRunner.ThenAsync("o sistema deverá registrar o comprovante de ponto", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 41
 await testRunner.AndAsync("a data do ponto do comprovante deverá ser \'17/02/2023 17:07\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
