// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MeuPonto.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CadastroDeEmpregadoresFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CadastroEmpregadores.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Features", "Cadastro de Empregadores", @"O sistema deverá fornecer para o trabalhador a capacidade de cadastrar um empregador

O sistema deverá fornecer para o trabalhador a capacidade de abrir um contrato feito com um empregador novo

O sistema deverá fornecer para o trabalhador a capacidade de abrir um contrato feito com um empregador existente", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Cadastro de Empregadores")))
            {
                await global::MeuPonto.Features.CadastroDeEmpregadoresFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Cadastrar Empregador] Trabalhador cadastra um empregador")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Cadastro de Empregadores")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("main")]
        public async System.Threading.Tasks.Task CadastrarEmpregadorTrabalhadorCadastraUmEmpregador()
        {
            string[] tagsOfScenario = new string[] {
                    "main"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Cadastrar Empregador] Trabalhador cadastra um empregador", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
 await testRunner.WhenAsync("o trabalhador solicitar o cadastro de um empregador", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 16
 await testRunner.ThenAsync("o sistema deverá apresentar um empregador novo", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table3.AddRow(new string[] {
                            "Empregador A"});
#line 17
 await testRunner.WhenAsync("o trabalhador cadastrar o empregador como:", ((string)(null)), table3, "Quando ");
#line hidden
#line 20
 await testRunner.ThenAsync("o sistema deverá registrar o empregador como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato com Empregador Novo] Trabalhador abre um contrato feito com um em" +
            "pregador novo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Cadastro de Empregadores")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extension")]
        public async System.Threading.Tasks.Task AbrirContratoComEmpregadorNovoTrabalhadorAbreUmContratoFeitoComUmEmpregadorNovo()
        {
            string[] tagsOfScenario = new string[] {
                    "extension"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato com Empregador Novo] Trabalhador abre um contrato feito com um em" +
                    "pregador novo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
 await testRunner.GivenAsync("que existe uma abertura de contrato em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 27
 await testRunner.WhenAsync("o trabalhador solicitar o cadastro de um empregador", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 28
 await testRunner.ThenAsync("o sistema deverá apresentar um empregador novo", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table4.AddRow(new string[] {
                            "Empregador Novo"});
#line 29
 await testRunner.WhenAsync("o trabalhador cadastrar o empregador como:", ((string)(null)), table4, "Quando ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "empregador"});
                table5.AddRow(new string[] {
                            "Empregador Novo"});
#line 33
 await testRunner.WhenAsync("o trabalhador abrir o contrato feito com um empregador como:", ((string)(null)), table5, "Quando ");
#line hidden
#line 36
 await testRunner.ThenAsync("o sistema deverá registrar o contrato como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato com Empregador Existente] Trabalhador abre um contrato feito com " +
            "um empregador existente")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Cadastro de Empregadores")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extension")]
        public async System.Threading.Tasks.Task AbrirContratoComEmpregadorExistenteTrabalhadorAbreUmContratoFeitoComUmEmpregadorExistente()
        {
            string[] tagsOfScenario = new string[] {
                    "extension"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato com Empregador Existente] Trabalhador abre um contrato feito com " +
                    "um empregador existente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
 await testRunner.GivenAsync("que existe um empregador cadastrado \'Empregador Existente\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 44
 await testRunner.AndAsync("que existe uma abertura de contrato em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "empregador"});
                table6.AddRow(new string[] {
                            "Empregador Existente"});
#line 45
 await testRunner.WhenAsync("o trabalhador abrir o contrato feito com um empregador como:", ((string)(null)), table6, "Quando ");
#line hidden
#line 48
 await testRunner.ThenAsync("o sistema deverá registrar o contrato como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Abrir Contrato] Trabalhador abre um contrato a partir de um empregador")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Cadastro de Empregadores")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("main")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("wip")]
        public async System.Threading.Tasks.Task AbrirContratoTrabalhadorAbreUmContratoAPartirDeUmEmpregador()
        {
            string[] tagsOfScenario = new string[] {
                    "main",
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Abrir Contrato] Trabalhador abre um contrato a partir de um empregador", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 55
 await testRunner.GivenAsync("que existe um empregador cadastrado \'Empregador Existente\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 56
 await testRunner.WhenAsync("o trabalhador solicitar a abertura de um contrato a partir de um empregador", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 57
 await testRunner.ThenAsync("o sistema deverá apresentar um contrato novo", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "empregador"});
                table7.AddRow(new string[] {
                            "Empregador Existente"});
#line 59
 await testRunner.WhenAsync("o trabalhador abrir o contrato como:", ((string)(null)), table7, "Quando ");
#line hidden
#line 62
 await testRunner.ThenAsync("o sistema deverá registrar o contrato como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 63
 await testRunner.AndAsync("o contrato deverá ser feito com o empregador \'Empregador Existente\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[Cadastrar Empregador] Trabalhador cadastra um empregador com nome maior que 2 ca" +
            "ractere")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Cadastro de Empregadores")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("secondary")]
        public async System.Threading.Tasks.Task CadastrarEmpregadorTrabalhadorCadastraUmEmpregadorComNomeMaiorQue2Caractere()
        {
            string[] tagsOfScenario = new string[] {
                    "secondary"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[Cadastrar Empregador] Trabalhador cadastra um empregador com nome maior que 2 ca" +
                    "ractere", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 69
 await testRunner.GivenAsync("que existe um cadastro de empregador em andamento", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "nome"});
                table8.AddRow(new string[] {
                            "Empregador B"});
#line 70
 await testRunner.WhenAsync("o trabalhador cadastrar o empregador como:", ((string)(null)), table8, "Quando ");
#line hidden
#line 73
 await testRunner.ThenAsync("o sistema deverá registrar o empregador como esperado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
