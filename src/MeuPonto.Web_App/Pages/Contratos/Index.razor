@page "/app/contratos"
@using Microsoft.EntityFrameworkCore;
@using MeuPonto.Models.Contratos;

@inject NavigationManager _navigation;

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-page="/Index"><i class="bi bi-house"></i></a></li>
        <li class="breadcrumb-item active" aria-current="page">Contratos</li>
    </ol>
</nav>

<h1>Gestão de Contratos</h1>

<div class="btn-group mb-3">
    <a class="btn btn-primary criacao contrato" href="app/contratos/criar">
        <i class="bi bi-plus-circle"></i>
        Criar Novo
    </a>
</div>

<div class="table-responsive text-nowrap">
    <table class="table table-striped align-middle mb-3 contratos">
        <thead>
            <tr>
                <th rowspan="3">Ações</th>
                <th rowspan="3">
                    Nome
                </th>
                <th rowspan="3">
                    Ativo
                </th>
                <th rowspan="2">
                    Empregador
                </th>
                <th colspan="8">
                    Jornada Trabalho Semanal Prevista
                </th>
            </tr>
            <tr>
                <th colspan="7">
                    Semana
                </th>
                <th rowspan="2" class="text-primary">
                    Tempo Total
                </th>
            </tr>
            <tr>
                <th>
                    @DayOfWeek.Sunday
                </th>
                <th>
                    @DayOfWeek.Monday
                </th>
                <th>
                    @DayOfWeek.Tuesday
                </th>
                <th>
                    @DayOfWeek.Wednesday
                </th>
                <th>
                    @DayOfWeek.Thursday
                </th>
                <th>
                    @DayOfWeek.Friday
                </th>
                <th>
                    @DayOfWeek.Saturday
                </th>
            </tr>
            <tr>
                <th>
                    <div class="btn-group" role="group">
                        <button class="btn btn-secondary" @onclick="Filtrar">
                            <i class="bi bi-funnel"></i>
                            Filtrar
                        </button>
                        <a class="btn btn-warning" asp-page="./Index">
                            <i class="bi bi-x-circle"></i>
                        </a>
                    </div>
                </th>
                <th>
                    <input @bind="Nome" class="form-control" />
                </th>
                <th>
                    <select class="form-select">
                        <option value=""></option>
                        <option value="true">Sim</option>
                        <option value="false">Não</option>
                    </select>
                </th>
                <th class="table-secondary" colspan="12">

                </th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach (var item in _contratos)
            {
                <tr data-id="@item.Id">
                    <td class="p-1" scope="row">
                        <div class="btn-group" role="group">
                            <a class="btn btn-link rounded-0" asp-page="./Detalhar" asp-route-id="@item.Id" title="Detalhar">
                                <i class="bi bi-card-text"></i>
                            </a>
                            <a class="btn btn-link edicao" asp-page="./Editar" asp-route-id="@item.Id" title="Editar">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <a class="btn btn-link text-danger exclusao rounded-0" asp-page="./Excluir" asp-route-id="@item.Id" title="Excluir">
                                <i class="bi bi-trash"></i>
                            </a>
                        </div>
                    </td>
                    <td>
                        @item.Nome
                    </td>
                    <td>
                        @item.Ativo
                    </td>
                    <td>
                        @item.Empregador.Nome
                    </td>
                    <td>
                        @item.JornadaTrabalhoSemanalPrevista.Semana[0].Tempo
                    </td>
                    <td>
                        @item.JornadaTrabalhoSemanalPrevista.Semana[1].Tempo
                    </td>
                    <td>
                        @item.JornadaTrabalhoSemanalPrevista.Semana[2].Tempo
                    </td>
                    <td>
                        @item.JornadaTrabalhoSemanalPrevista.Semana[3].Tempo
                    </td>
                    <td>
                        @item.JornadaTrabalhoSemanalPrevista.Semana[4].Tempo
                    </td>
                    <td>
                        @item.JornadaTrabalhoSemanalPrevista.Semana[5].Tempo
                    </td>
                    <td>
                        @item.JornadaTrabalhoSemanalPrevista.Semana[6].Tempo
                    </td>
                    <td>
                        @item.JornadaTrabalhoSemanalPrevista.TempoTotal
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@*<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
*@
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Nome { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool? Ativo { get; set; }

    private IList<Contrato> _contratos { get; set; } = default!;

    private int? _paginaAtual { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _contratos = new List<Contrato>();

        //if (_db.Contratos != null)
        //{
        //    _contratos = await _db.Contratos
        //        .Where(x => true
        //            && (Nome == null || x.Nome == Nome)
        //            && (Ativo == null || x.Ativo == Ativo)
        //            && (Matricula == null || x.Matricula == Matricula))
        //        .OrderByDescending(x => x.Nome)
        //        .ToListAsync();
        //}
    }

    private async Task Filtrar()
    {
        //if (_db.Contratos != null)
        //{
        //    _contratos = await _db.Contratos
        //        .Where(x => true
        //            && (Nome == null || x.Nome == Nome)
        //            && (Ativo == null || x.Ativo == Ativo)
        //            && (Matricula == null || x.Matricula == Matricula))
        //        .OrderByDescending(x => x.Nome)
        //        .ToListAsync();
        //}
    }
}
