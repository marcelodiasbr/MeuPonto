// <auto-generated />
using System;
using MeuPonto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeuPonto.Data.Migrations
{
    [DbContext(typeof(MeuPontoDbContext))]
    partial class MeuPontoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeuPonto.Models.Configuracoes", b =>
                {
                    b.Property<bool>("JavascriptIsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Configuracoes", (string)null);
                });

            modelBuilder.Entity("MeuPonto.Models.Contratos.Contrato", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("EmpregadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmpregadorId");

                    b.ToTable("Contratos", (string)null);
                });

            modelBuilder.Entity("MeuPonto.Models.Contratos.Empregador", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Empregadores", (string)null);
                });

            modelBuilder.Entity("MeuPonto.Models.Folhas.Folha", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Competencia")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ContratoId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("Folhas", (string)null);
                });

            modelBuilder.Entity("MeuPonto.Models.Folhas.StatusFolha", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("StatusFolha");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Nome = "Aberta"
                        },
                        new
                        {
                            Id = 1,
                            Nome = "Fechada"
                        });
                });

            modelBuilder.Entity("MeuPonto.Models.Pontos.Comprovante", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte[]>("Imagem")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("PontoId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TipoImagemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PontoId");

                    b.ToTable("Comprovantes", (string)null);
                });

            modelBuilder.Entity("MeuPonto.Models.Pontos.Momento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Momento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Entrada"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Saída"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Errado"
                        });
                });

            modelBuilder.Entity("MeuPonto.Models.Pontos.Pausa", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Pausa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Almoço"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Café/Lanche"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Banheiro"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Conversa/Reunião"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Telefonema"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Genérica"
                        });
                });

            modelBuilder.Entity("MeuPonto.Models.Pontos.Ponto", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContratoId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DataHora")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool>("Estimado")
                        .HasColumnType("bit");

                    b.Property<int>("MomentoId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PausaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("Pontos", (string)null);
                });

            modelBuilder.Entity("MeuPonto.Models.Pontos.TipoImagem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TipoImagem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Original"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Tratada"
                        });
                });

            modelBuilder.Entity("MeuPonto.Models.Trabalhadores.Trabalhador", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Trabalhadores", (string)null);
                });

            modelBuilder.Entity("MeuPonto.Models.Contratos.Contrato", b =>
                {
                    b.HasOne("MeuPonto.Models.Contratos.Empregador", "Empregador")
                        .WithMany()
                        .HasForeignKey("EmpregadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("MeuPonto.Models.Contratos.JornadaTrabalhoSemanal", "JornadaTrabalhoSemanalPrevista", b1 =>
                        {
                            b1.Property<Guid>("ContratoId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ContratoId");

                            b1.ToTable("Contratos");

                            b1.WithOwner()
                                .HasForeignKey("ContratoId");

                            b1.OwnsMany("MeuPonto.Models.Contratos.JornadaTrabalhoDiaria", "Semana", b2 =>
                                {
                                    b2.Property<Guid>("ContratoId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("DiaSemana")
                                        .HasColumnType("int");

                                    b2.Property<TimeSpan?>("Tempo")
                                        .IsRequired()
                                        .HasColumnType("time");

                                    b2.HasKey("ContratoId", "DiaSemana");

                                    b2.ToTable("Contratos_JornadaTrabalhoDiaria", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ContratoId");
                                });

                            b1.Navigation("Semana");
                        });

                    b.Navigation("Empregador");

                    b.Navigation("JornadaTrabalhoSemanalPrevista")
                        .IsRequired();
                });

            modelBuilder.Entity("MeuPonto.Models.Folhas.Folha", b =>
                {
                    b.HasOne("MeuPonto.Models.Contratos.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MeuPonto.Models.Folhas.ApuracaoMensal", "ApuracaoMensal", b1 =>
                        {
                            b1.Property<Guid>("FolhaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long?>("TempoTotalPeriodoAnterior")
                                .HasColumnType("bigint");

                            b1.HasKey("FolhaId");

                            b1.ToTable("Folhas");

                            b1.WithOwner()
                                .HasForeignKey("FolhaId");

                            b1.OwnsMany("MeuPonto.Models.Folhas.ApuracaoDiaria", "Dias", b2 =>
                                {
                                    b2.Property<Guid>("FolhaId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int?>("Dia")
                                        .HasColumnType("int");

                                    b2.Property<long?>("DiferencaTempo")
                                        .HasColumnType("bigint");

                                    b2.Property<bool>("Falta")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("Feriado")
                                        .HasColumnType("bit");

                                    b2.Property<string>("Observacao")
                                        .HasMaxLength(255)
                                        .HasColumnType("nvarchar(255)");

                                    b2.Property<long?>("TempoAbonado")
                                        .HasColumnType("bigint");

                                    b2.Property<long?>("TempoApurado")
                                        .HasColumnType("bigint");

                                    b2.Property<long>("TempoPrevisto")
                                        .HasColumnType("bigint");

                                    b2.HasKey("FolhaId", "Dia");

                                    b2.ToTable("Folhas_ApuracaoDiaria", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("FolhaId");
                                });

                            b1.Navigation("Dias");
                        });

                    b.Navigation("ApuracaoMensal")
                        .IsRequired();

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("MeuPonto.Models.Pontos.Comprovante", b =>
                {
                    b.HasOne("MeuPonto.Models.Pontos.Ponto", "Ponto")
                        .WithMany("Comprovantes")
                        .HasForeignKey("PontoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ponto");
                });

            modelBuilder.Entity("MeuPonto.Models.Pontos.Ponto", b =>
                {
                    b.HasOne("MeuPonto.Models.Contratos.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("MeuPonto.Models.Trabalhadores.Trabalhador", b =>
                {
                    b.OwnsOne("MeuPonto.Modules.Billing.CustomerSubscription", "CustomerSubscription", b1 =>
                        {
                            b1.Property<Guid>("TrabalhadorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("SubscriptionPlanId")
                                .HasColumnType("int");

                            b1.HasKey("TrabalhadorId");

                            b1.ToTable("Trabalhadores");

                            b1.WithOwner()
                                .HasForeignKey("TrabalhadorId");
                        });

                    b.Navigation("CustomerSubscription");
                });

            modelBuilder.Entity("MeuPonto.Models.Pontos.Ponto", b =>
                {
                    b.Navigation("Comprovantes");
                });
#pragma warning restore 612, 618
        }
    }
}
